_____________ Mysql Slave re-sync checklist __________________________
                                               
slave_mysql_sync.txt                          Last Update: 19.7.06/SB
______________________________________________________________________


1. Introduction
================
Reference.http://dev.mysql.com/doc/refman/5.0/en/replication-howto.html
Replace the following below:
		SERVER2.DOMAIN                 the FQDN of your slave
		REPL_PASSWD                    Replication password


2. Master: enable replication
==============================

On the mysql prompt:
GRANT SELECT, PROCESS, FILE, SUPER, REPLICATION CLIENT, REPLICATION SLAVE ON *.*
  TO 'repl'@'vmps2' IDENTIFIED BY 'REPL_PASSWD';
  
SHOW MASTER STATUS;

Purge uneeded logs on the master:
PURGE MASTER LOGS TO 'SERVER-bin.NUMBER'            [the exactname comes from the File field in the status above]
    


3. Re-synchronisation
=====================
We'll use "vmps2" to mean the slave, and "vmps1" to mean the master.

0) vmps2
stop slave;

1) Master vmps1: Lock tables, note log position, restart

FLUSH TABLES WITH READ LOCK;

vmps1:/mysqldata[11]$ 
tar cvf inventory.tar inventory

mysql> SHOW MASTER STATUS;
+------------------------+----------+--------------+------------------+
| File                   | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------------+----------+--------------+------------------+
| vmps1-bin.000027       | 12717436 |              |                  |
+------------------------+----------+--------------+------------------+

==> take note of the position

UNLOCK TABLES;


2) Slave vmps2:

- stop mysql
rcmysql stop

- Copy DB tar file from master & extract:
   mv inventory inventory.$$
   scp vmps1:/mysql/inventory.tar .
   tar xvf inventory.tar
   chmod 770 inventory; chmod g+s inventory; chown -R mysql:mysql inventory;

- Configure slave: start daemon with slave off
  /usr/local/mysql/bin/mysqld --user=mysql --skip-slave-start --log-warnings

Start mysql client:
	reset slave;

# CHANGE MASTER, replace XXXX, YYYY and 'file_name': 
  MASTER_PASSWORD='YYYY', MASTER_LOG_FILE='file_name', MASTER_LOG_POS=XXXX;
  
- Start replication:
	START SLAVE;
	show slave status \G;

- Check the log position with that on the master:
	show master status;

--- Create a new vmpsauth table, which is the only local table:
CREATE TABLE inventory.`vmpsauth` ( `mac` varchar(30) NOT NULL default '', `AuthLast` datetime default NULL, `AuthPort` varchar(20) default NULL, `AuthSw` varchar(20) default NULL, `vlan_group` int(11) default NULL, `AuthVlan` int(11) default NULL, PRIMARY KEY (`mac`) ) ENGINE=MyISAM DEFAULT CHARSET=latin1 COMMENT='List of VMPS authenticated Computers' ;

- Also check the slave mysql log for errors.

- If all looks fine, stop the slave and start it normally:

   rcmysql stop
   rcmysql start
   rcvmps start
   tail -f /var/log/messages | grep vmpsd_external



3. Fixing a replication problem
================================
It has happened that replication had stops due to an invalid query.
Replication if OK if
    show slave status \G;
shows the master log position  correct, Slave_IO_Running: Yes and Slave_SQL_Running: Yes.

In this eaxmple, Slave_SQL_Running was 'No', so we fixed it, by stopping the 
slave and skipping the SQL Query causing the problem:

  stop slave;
  SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1;
  start slave;
  show slave status \G;
  
It now skips to the next error:
  Slave_SQL_Running: No
  Last_Error: Error 'Unknown table 'inventory.v_1'' on query. Default database: 'inventory'. Query: 'DROP   VIEW v_1'

To get through these difficult queries, it may be necessary to repeat the above.
  
[Note: I don't why drop views failed, seems to be a MySQL5 issue]
More reading:
  http://dev.mysql.com/doc/refman/5.0/en/set-global-sql-slave-skip-counter.html
  http://dev.mysql.com/doc/refman/5.1/en/replication-options.html


4. Monitoring replication
=========================
Install monitor_mysql_slave and call it from cron on the slave:
*/5  7-18 * * 1-5 /opt/nac/bin/monitor_mysql_slave


// done