#!/usr/bin/php -f
<?php
/**
 * /opt/nac/bin/vmps_lastseen
 *
 * Long description for file:
 * FUNCTION:
 * - Update the "last seen" entry for a specific MAC address. 
 * - If the system is new, insert new Users, Ports, Switches, System as appropriate 
 * - and send an email alert.
 * - Automatically recognise and allow GWPs.
 *  This function is called for any errors or
 *  messages sent to stdout/err. The idea is to catch all
 *  such messages and send them to syslog, this this is a daemon normally
 *  detached from the console
 *
 * Note: when debugging, set $debug_flag1=TRUE and run standalone, not
 *       from inittab, otherwise you won't see the debug messages.
 *       If it seems not to be parsing the log, kill it ans init will
 *       restart it.
 *
 * PHP version 5
 *
 * LICENSE: This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation.
 *
 * @package			FreeNAC
 * @author			Sean Boran (FreeNAC Core Team)
 * @copyright		2006 FreeNAC
 * @license			http://www.gnu.org/copyleft/gpl.html   GNU Public License Version 2
 * @version			SVN: $Id$
 * @link				http://www.freenac.net
 *
 */


$debug_flag1=FALSE;
$debug_flag2=FALSE;
$debug_flag1=TRUE;
#$debug_flag2=TRUE;

require_once "funcs.inc";

global  $lastseen_dryrun, $default_user_unknown;
if ($debug_flag2===TRUE) {
  $daemon=false;
  $lastseen_dryrun=true;
} else  { 
  $daemon=true;
  global  $lastseen_dryrun;
}

$progname = basename($argv[0]);
define_syslog_variables();
openlog("vmps_lastseen", LOG_PID , LOG_LOCAL5);
$logfile="php://stdin";


#
# ------- functions -------------------
#

/** This function is called for any errors or
 *  messages sent to stdout/err. The idea is to catch all
 *  such messages and send them to syslog, this this is a daemon normally
 *  detached from the console
 */
function callback($buffer)
{
  if (strlen($buffer) > 1) {
    logit('callback:[' . $buffer .']');
  }
  #return(true);
}

/** depreciated Vmps V1
 */
function request_vmps_update() {
  global $connect;
  $query="UPDATE oper SET datetime=NOW() WHERE value='guiupdate'";
  $res = mysql_query($query, $connect);
  if (!$res) { die('Invalid query: ' . mysql_error()); }
}


function patch_lookup($port_id) {
  global $connect;

  ## First find office if possible and lookup users
  $query="select p.office as office_id, l.name as location from location l inner join patchcable p where l.id=p.office and p.port='$port_id'";
  #$query="select office from patchcable where port='" . $port_id ."'";
  debug1($query);
  $res = mysql_query($query, $connect);
  if (!$res) { die('Invalid query: ' . mysql_error()); }
  if (mysql_num_rows($res)==1) {
    $resultarray=mysql_fetch_array($res, MYSQL_ASSOC);
    $office=$resultarray['location'];
    $office_id=$resultarray['office_id']; 
    #debug1("patch_lookup office $office");

    ## Now lookup Direx users for that office
    $query="SELECT GROUP_CONCAT(Surname) as Surname from users WHERE PhysicalDeliveryOfficeName='" . $office . "'";
    debug1($query);
    $res = mysql_query($query, $connect);
    if (!$res) { die('Invalid query: ' . mysql_error()); }
    if (mysql_num_rows($res)==1) {
      $resultarray=mysql_fetch_array($res, MYSQL_NUM);
      $users=$resultarray[0];
      #debug1("patch_lookup users $users");
    }
  }

  ## Lookup all details for that switch/port from patches
  $query="select CONCAT(outlet,', $office, ',comment) from patchcable where port='" . $port_id . "'";
  debug1($query);
  $res = mysql_query($query, $connect);
  if (!$res) { die('Invalid query: ' . mysql_error()); }

  if (mysql_num_rows($res) ==0) {
    $result='unknown';      # no entry
    debug2("Patch not found");
  } else {
    $resultarray=mysql_fetch_array($res, MYSQL_NUM);
    $result=$users . " " . $resultarray[0];
    debug2("patch_lookup $result");
  }
  return $result;
}


#
# ----------- main() : infinite loop -----------------------------------

if ($lastseen_dryrun)  {
  echo "*** DRYRUN: No DB inserts will be done***\n";

} else {
  ob_start("callback");   # see call back function above
} 

## Fork and run in background as a daemon
if ($daemon) {
  $pid = pcntl_fork();    # fork child & get PID
  if ($pid == -1) {
    die("pcntl_fork() failed: $php_errorstr");

  } else if ($child_pid) {
    #printf("I am the parent, my pid is %d and my child's pid is .%d.\n", 
    #  posix_getpid(), $child_pid);
    ob_flush();              // log buffered outputs
    pcntl_wait($status);     // Protect against Zombie children
    exit(0);                 // parent exits

  } else {
    //printf("I am the child, my pid is %d.\n", posix_getpid());
    ob_flush();              // log buffered outputs
  }
  posix_setsid();        // create new session, detach from shells process group
}


## loop to constantly read stdin
do {
  db_connect();
  logit('Started, connect to DB');
  ob_flush();              // log buffered outputs

  $fd = fopen($logfile, "r");
  while ( ! feof($fd) ) {
    $line=fgets($fd);
    if (strlen($line)==0) {
      sleep(1);
      #echo("Empty: $line\n");
      continue;
    }
    #echo("Length, Original: " +(string) strlen($line) +" $line\n");
    #echo("Original: $line\n");

    ## Nov 26 11:34:29 dnag2 vmpsd: [ID 922485 local6.info] ALLOW: 000f1f44e801 -> secHH230, switch 192.168.245.71 port 2/37
    ## Pull out the lines that summarise connections
    $regs=array();

    #if (ereg("(.*) vmpsd: .*(ALLOW|DENY): (.*) -> (.*), switch (.*) port (.*)", $line, $regs) ) {
    if (ereg("(.*) vmpsd: +(ALLOW|DENY): (.*) -> (.*), switch (.*) port (.*)", $line, $regs) ) {
      #echo "FOUND: {$regs[1]} {$regs[2]} $regs[3]\n";
      debug2("FOUND: {$regs[1]} {$regs[2]} $regs[3]");
      $success=$regs[2]; 
      $mac=$regs[3]; 
      $vlan=$regs[4]; 
      $switch=$regs[5]; 
      $port=rtrim($regs[6]); 
      #$details=rtrim($regs[1] . " " . $regs[3]);
      $details="$regs[1]";
      $mac2="$mac[0]$mac[1]$mac[2]$mac[3].$mac[4]$mac[5]$mac[6]$mac[7].$mac[8]$mac[9]$mac[10]$mac[11]";
      debug2("mac=$mac2 vlan=$vlan switch=$switch port=$port");

      if (($mac2=='0000.0000.0000') || ($mac2=='ffff.fdff.ffff') || ($mac2=='ffff.fcff.ffff') )  {
        #continue;   // an invalid record, ignore
        logit("Ignoring address $mac2");
        $mac2='';
        $log_entry='';
        $subject='';
        $newmac_found=FALSE;

      } else {
        $log_entry='';
        $subject='';
        $newmac_found=FALSE;
        
        $switch_id=0;
        $port_id=0;
        $vlan_id=0;
        $system_id=0;

        ## 2. Has this switch been seen before? If not add to table
        $query="SELECT id from switch WHERE ip='" . $switch . "' ";
        debug1("$query\n");
        $res = mysql_query($query);
        if (!$res) { die('Invalid query: ' . mysql_error()); }
        if ((mysql_num_rows($res) ==0) && ! $lastseen_dryrun) {   # entry does not exist, 0 rows
          $query="INSERT INTO switch "
          . "SET ip='" . $switch . "', name='unknown'";
          #.      "comment='First found: "     . $details    . "' ";
          log("New switch: $query");
          logit("New switch entry $switch, please update the description.");
          reporterr('info', "New switch entry $switch, please update the description.");
          $res = mysql_query($query);
          if (!$res) { die('Invalid query: ' . mysql_error()); }
          $switch_id=v_sql_1_select("select id from switch where ip='$switch'");
        }
        else {
          # Remember switch name for better logging
          $row=mysql_fetch_array($res, MYSQL_NUM);
          $switch_id=$row[0];
          $log_entry=$log_entry . $row[0];
        }



        ## 3. Has this Port been seen before? If not add to table
        $query="select location.name as location, switch.name as switch, building.name as building from building right join location on building.id=location.building_id  inner join switch on location.id=switch.location and switch.id=$switch_id;";
        $res=mysql_query($query);
        if ($res)
        {
           $results=mysql_fetch_array($res,MYSQL_ASSOC);
           $location_name=$results['location'];
           $switch_name=$results['switch'];
           $building_name=$results['building'];
        }
        else
        {
           $location_name='';
           $switch_name='';
           $building_name='';
        }
        
        $port_id=v_sql_1_select("select id from port where switch='$switch_id' and name='$port'");
                
        if (!$port_id and ! $lastseen_dryrun) 
        {
          // ===== entry does not exist, --> NEW PORT!

          # Where is the port? See if this port is in patch table & update 'office'
          # if not, set office to switch location.
          $port_loc='';
          logit("new port $port location from patch table=$location_name");
          if (strlen($port_loc_tmp)>1) {      # we have a valid office
            $port_loc=$location_name." ".$building_name;

          } else {
            logit("new port $port location from switch=$switch_name");
            if (strlen($port_loc_tmp)>1) {      # we have a valid office
              $port_loc=$location_name." ".$building_name;

            } else {                            # we really have no idea where it is
              $port_loc='unknown';
            }
          }
          if (strlen($port_loc)==0)
             $port_loc='unknown';
          $query="INSERT INTO port SET switch='$switch_id', name='$port'";
          logit($query);
          logit("New port $port on sw $switch, location=$port_loc. Please update description");
          reporterr('info', "New port $port on sw $switch, location=$port_loc. Please update description");
          $res = mysql_query($query);
          if (!$res) { die('Invalid query: ' . mysql_error()); }
          $port_id=v_sql_1_select("select id from port where switch='$switch_id' and name='$port'");
        }
        else {
          $query="select pa.comment as patchcable_comment from port po inner join patchcable pa on pa.port=po.id and po.switch='$switch_id' and po.name='$port';";
          debug1($query);
          $res = mysql_query($query);
          $result=mysql_fetch_array($res,MYSQL_ASSOC);
          $port_id=v_sql_1_select("select id from port where switch='$switch_id' and name='$port'");
          $patchcable=$result['patchcable_comment'];
          #$subject="in $building_name, $location_name, $patchcable, port $port";
          $subject="in $location_name, $patchcable, port $port";
        }


        #####################################################
        ## Search the DB for this MAC & update "LastSeen" ###
        $vlan_id=v_sql_1_select("select id from vlan where default_name='$vlan'");
	$system_id=v_sql_1_select("select id from systems where mac='$mac2'");
        $query="UPDATE systems SET LastSeen=NOW()"
        . ", LastPort='" .$port_id . "' "
        . ", LastVlan='" .$vlan_id . "' "
        ." WHERE id='" . $system_id . "'";
        debug1($query);
        $res = mysql_query($query);
        if (!$res) { die('Invalid query: ' . mysql_error()); }

        debug1("Records affected: " . mysql_affected_rows());
        if (mysql_affected_rows() ==0) { 

          # Even through no records were affected, it might have been
          # 'cos the LastSeen record was up to date, so first check to see if
          # there is an entry for this MAC.
          $query="SELECT name from systems WHERE id='" . $system_id . "' ";
          debug1("$query");
          $res = mysql_query($query);
          if (!$res) { die('Invalid query: ' . mysql_error()); }
    
          ## 
          ##
          ## 1. Create a new entry for this MAC, disabled by default ##
          ##
          if (mysql_num_rows($res) ==0) {   # entry does not exist, 0 rows

            $newmac_vendor=lookup_vendor_mac($mac2);

            if ($lastseen_infnet==TRUE) {         # Enterprise only

                # 1.1 Infnet PC?: See if its known on SMS, can take several secs
                $retval='';
                $infnet_details=syscall("$sms_infnet_mac $mac2", $retval);

                # Enable PC and set to Infnet VLAN
                if(preg_match("/Host=(\S+) NtAccount=(\S+) OS=(.+)$/",$infnet_details, $matches)) {
                  $infnet_name=$matches[1];     
                  $txx_name= $default_user_unknown;         # default
                  $txx_name   =$matches[2];
                  $sms_os     =$matches[3];
                  $infnet_details="";
                  logit("Infnet PC: name=$infnet_name, NTaccount=$txx_name, $sms_os, $infnet_details");
                  $os3_id=v_sql_1_select("select id from sys_os3 where value='$sms_os'");     
                  $query="INSERT INTO systems "
                  . "SET LastSeen=NOW(), status=1, class=1,"      # active, GWP
                  .      "description='$txx_name', "   # nt account
                  .      "name='$infnet_name', "
                  .      "comment='$infnet_details', "
                  .      "vlan='$vlan_id', "
                  .      "os3='$os3_id', "
                  .      "lastport='$port_id', "
                  .      "office='$location_id', "
                  .      "mac='$mac2' ";
                  debug1("New INFNET System $mac2 on sw/port $switch/$port"); 
                  $newmac_found=TRUE;                // used further down
              
                  $log_entry="New INFNET $mac2 ($newmac_vendor) $infnet_name, $txx_name, $infnet_details, switch ";

                  if ($lastseen_dryrun==FALSE) {
                    $res = mysql_query($query);
                    if (!$res) { die('Invalid query: ' . mysql_error()); }
                    snmp_restart_port($port, $switch);
                  }

               
                  insert_user($txx_name);
                  #logit("Inserted new user $txx_name");
                  direx_sync_user($txx_name);
                  #logit("Symced new user $txx_name");

                  // Document the user's details in the alert
                  $query="SELECT CONCAT(Givenname,' ',Surname,' ',Department,' ',Mobile) from users where AssocNtAccount='$txx_name'";
                    $res = mysql_query($query);
                    if (!$res) { die('Invalid query: ' . mysql_error()); }
                    list($infnet_details)=mysql_fetch_array($res);

                } else {
                  $infnet_name='unknown infnet';     
                  $infnet_details="sms_infnet_mac: error";     
                }
            }   # if infnet
            

            ## 1.2 Add new Unknown system: normal case

            if ($newmac_found==FALSE) { # Already added in Infnet Section?
              $default_vlan=v_sql_1_select("select id from vlan where default_id='$set_vlan_for_unknowns'");
              $query="INSERT INTO systems "
                . "SET LastSeen=NOW(), " 
                .      "status='$set_status_for_unknowns', name='unknown',"
                .      "vlan='$default_vlan',"
                .      "lastport='$port_id', office='$location_id', "
                .      "description='$default_user_unknown', "   # usually 'KEINE'
                .      "mac='$mac2' ";
              $log_entry="New unknown $mac2 ($newmac_vendor), switch $switch_name ";
              #logit($log_entry);

              if ($lastseen_dryrun==FALSE) {
                $res = mysql_query($query);
                if (!$res) { die('Invalid query: ' . mysql_error()); }
                $newmac_found=TRUE;
              }
            }  # if $newmac for non-infnet

          } # new mac
        }   # no system records
      }     # mac !=0
      ## Log details of new system
      if ($newmac_found===TRUE) {  
        if ($lastseen_patch_lookup==true) {
           ## lookup patch details if switch/port in patch list
           $log_entry=$log_entry . "(Patch: "
             . patch_lookup($port_id) .")";
        }
        logit($log_entry); 
        reporterr('info', $log_entry); 

        if ($lastseen_infnet==FALSE) {
          notify2($switch_name, $log_entry, "VMPS alert $subject"); 

        } else if ($lastseen_infnet_notify==TRUE) { # Only alert if set
          notify2($switch_name, $log_entry, "VMPS alert $subject"); 
        }

      }
    }                         # if log line
    ob_flush();               # log buffered outputs
  }                           # while ( $fd)

  mysql_close($connect);
  logit("Log /DB close, reconnect"); 
  debug2("Log /DB close, sleep, end."); 
  ob_flush();                # log buffered outputs

  usleep(500000);            # wait 0.5 secs (500ms * 100 mic.secs), before retrying

#} while (true);
} while ($lastseen_dryrun===false);   # If debugging only once

echo "*** DRYRUN: Singe loop finished\n";

ob_end_clean();              # will never really get here..

?>
