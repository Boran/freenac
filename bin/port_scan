#!/usr/bin/php -f
<?php
/**
 * /opt/nac/bin/portscan
 *
 * Long description for file:
 * Learn open ports from equipments allowed
 *
 * PHP version 5
 *
 * LICENSE: This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation.
 *
 * @package			FreeNAC
 * @author			Héctor Ortiz (FreeNAC Core Team)
 * @copyright			2006 FreeNAC
 * @license			http://www.gnu.org/copyleft/gpl.html   GNU Public License Version 2
 * @version			CVS: $Id:$
 * @link				http://www.freenac.net
 *
 */

include_once "./funcs.inc";
include_once "../etc/port_scan.inc";

define_syslog_variables();
openlog("port_scan", LOG_PID , LOG_LOCAL5);


debug1("Doing port_scan to systems... Please wait...\n");
logit("port_scan started");

$scan_results=$scan_directory."/scan.xml";   	//Scan file
$list=scan($scan_results,$nmap_flags);		//Scan network with those flags	
$var=parse_scanfile($scan_results,$list);		//Parse the xml file
if ($var['equipments']>0)			
   do_inventory($var);				//Check against database	
else
   $var['equipments']=0;

debug1("port_scan finished normally. ".$var['equipments']." hosts scanned\n");
logit("port_scan finished normally. ".$var['equipments']." hosts scanned");

function validate($string)
{
   rtrim($string,' ');
   if (get_magic_quotes_gpc()) {
      $value=stripslashes($string);
   }
   if (!is_numeric($string)) {
      $string= mysql_real_escape_string($string);
   }
   return $string;
}

function do_something($query)			//Let's do something with our structure
{
   $queries=$query['number'];   		//How many queries we have?
   $messages=$query['messages'];   		//How many messages?
   for ($i=0;$i<$queries;$i++)
        execute_query($query['query'][$i]);   	//Execute the queries
   for ($i=0;$i<$messages;$i++)
        debug1($query['message'][$i]);   	//And display the messages
}

function do_inventory($data_from_xml)
{
   $queries['number']=0;
   $queries['messages']=0;
   for ($i=0;$i<$data_from_xml['equipments'];$i++)	//How many hosts scanned
   {
       $ip=$data_from_xml[$i]['ip'];		//Get ip of one host
       $query=sprintf("select * from nac_hostscanned where ip='%s';",$ip);
       $res=execute_query($query);
       if ($res)
       {
          if (mysql_num_rows($res) ==0)
             $queries=add_entry($data_from_xml[$i],$queries);//Host not found in database 
          else
             $queries=check_existent($data_from_xml[$i],$queries); //Host in database, let's see if something has changed
       }
   }
   do_something($queries); 			//Do something with the structure
}

function check_existent($data,$queries) 	//This function will check info concerning one host scanned against its info in the database
{
   $timestamp=date('Y-m-d H:i:s');
   if ((!isset($data))||(!is_array($data)))
      check_and_abort("There was a problem parsing the XML file. Make sure you have the right version of PHP and libXML in your system",0);
   $ip=$data['ip'];   
   $mac=strtolower($data['mac']);
   $ports=$data['ports'];  			//Number of open ports this time
   $hostname=strtolower($data['hostname']);
   $os=$data['os'];   				//OS system this time
   $id=0;
   $query=sprintf("select * from nac_hostscanned where ip='%s';",$ip);
   $res=execute_query($query);
   if ($res)
   {
      $result=mysql_fetch_array($res, MYSQL_ASSOC);
      $db_ports=mysql_num_rows($res);
      $id=$result["id"];   			//Host's id in the database
      $db_mac=strtolower($result["mac"]);
      $db_ip=$result["ip"];			//Same IP from last time?
      $db_hostname=strtolower($result["hostname"]);		//Same hostname from last time?
      $db_os=$result["os"];			//Same OS from last time?
      $db_timestamp=$result["timestamp"];  	//If it changed, since when?
      $host_changed=$os_changed=$mac_changed=0; //To control if we need to update its record in the database
      if (!empty($hostname)&&!empty($db_hostname)&&(strcasecmp($hostname,$db_hostname)!=0))   	//Info about its hostname
      {
         if ((strcasecmp($db_hostname,'NULL')==0)&&(strcasecmp($hostname,'NULL')!=0))
         { 
            $queries['message'][$queries['messages']]="Host $ip has its hostname resolved now. $ip is $hostname\n";
            $queries['messages']++;		//And internal counter within the sctructure which counts the number of messages produced
            $host_changed++;
         }
         else if ((strcasecmp($db_hostname,'NULL')!=0)&&(strcasecmp($hostname,'NULL')==0))
         {
            $queries['message'][$queries['messages']]="Unable to resolve $ip this time, old hostname $db_hostname preserved\n";
            $queries['messages']++;
            $mac=$db_mac;
         }
         else
         { 
            $queries['message'][$queries['messages']]="Old hostname $db_hostname no longer valid. Renamed to $hostname\n";
            $queries['messages']++;
            $host_changed++;
         }
      }
      if (!empty($mac)&&!empty($db_mac)&&(strcasecmp($mac,$db_mac)!=0))		//Info about its MAC
      {
         if ((strcasecmp($db_mac,'NULL')==0)&&(strcasecmp($mac,'NULL')!=0))
         {
            $queries['message'][$queries['messages']]="MAC from $ip determined. MAC is $mac\n";
            $queries['messages']++;
            $mac_changed++;
         }
         else if ((strcasecmp($db_mac,'NULL')!=0)&&(strcasecmp($mac,'NULL')==0))
         {
            $queries['message'][$queries['messages']]="No new MAC info for $ip this time\n";
            $queries['messages']++;
            $mac=$db_mac;
         }
         else
         {
            $queries['message'][$queries['messages']]="$ip has changed its MAC since $db_timestamp. New MAC is $mac\n";
	    logit($queries['message'][$queries['messages']]);
            $queries['messages']++;
            $mac_changed++;
         }
      }
      if (!empty($os)&&empty($db_os)&&(strcasecmp($os,$db_os)!=0))		//Info about its OS
      {
         if ((strcasecmp($db_os,'NULL')==0)&&(strcasecmp($os,'NULL')!=0))
         {
            $queries['message'][$queries['messages']]="OS from $ip now determined. $ip is using $os\n";
            $queries['messages']++;
            $os_changed++;
         }
         else if ((strcasecmp($db_os,'NULL')!=0)&&(strcasecmp($os,'NULL')==0))
         {
            $queries['message'][$queries['messages']]="No new MAC info for $ip this time\n";
            $queries['messages']++;
            $os=$db_os;
         }
         else
         {
            $queries['message'][$queries['messages']]="$ip has changed its OS since $db_timestamp. Now is using $os\n";
	    logit($queries['message'][$queries['messages']]);  //It is not very often that a host changes its OS, so send it to syslog
            $queries['messages']++;
            $os_changed++;
         }
      }
      $changes=$host_changed+$os_changed+$mac_changed;
      if($changes>0)
      {
         $query=sprintf("update nac_hostscanned set hostname='%s',mac='%s',os='%s',timestamp='%s' where id='%d' and ip='%s';",$hostname,$mac,$os,$timestamp,$id,$ip);
         $queries['query'][$queries['number']]=$query;
         $queries['number']++;
      }
      $query=sprintf("select * from nac_openports where host='%s';",$id);
      $res1=execute_query($query);
      if ($res1)				//Let's check info about ports
      {
         $db_ports=mysql_num_rows($res1);
         $db_tcp=0;
         $db_udp=0;
         while ($result=mysql_fetch_array($res1, MYSQL_ASSOC))
         {
            if ($result["protocol"]=="tcp")
            {
               $db_tmp_port_tcp[$db_tcp]['port']=$result["port"];
               $db_tmp_port_tcp[$db_tcp]['timestamp']=$result["timestamp"];
               $db_tmp_port_tcp[$db_tcp]['banner']=$result["banner"];
               $db_tcp++;
            }
            else if ($result["protocol"]=="udp")
            {
               $db_tmp_port_udp[$db_udp]['port']=$result["port"];
               $db_tmp_port_udp[$db_udp]['timestamp']=$result["timestamp"];
               $db_tmp_port_udp[$db_udp]['banner']=$result["banner"];
               $db_udp++;
            }
         }
         if ((isset($db_tmp_port_tcp))&&(is_array($db_tmp_port_tcp)))
            sort($db_tmp_port_tcp);
         if ((isset($db_tmp_port_udp))&&(is_array($db_tmp_port_udp)))
            sort($db_tmp_port_udp);
         if (($db_tcp==0)&&($db_udp==0)) //In case we have no info in the db
         {
            $db_protocol[0]="tcp";
            $db_port[0]=0;
            $db_porttstmp[0]="0000-00-00 00:00:00";
            $db_banner[0]=":"; 
         }
         else
         {
            for ($i=0;$i<$db_tcp;$i++)
            {
               $db_protocol[$i]="tcp";
               $db_port[$i]=$db_tmp_port_tcp[$i]['port'];
               $db_porttstmp[$i]=$db_tmp_port_tcp[$i]['timestamp'];
               $db_banner[$i]=$db_tmp_port_tcp[$i]['banner'];
            }
            for (;$i<($db_tcp+$db_udp);$i++)
            {
               $db_protocol[$i]="udp";
               $db_port[$i]=$db_tmp_port_udp[($i-$db_tcp)]['port'];
               $db_porttstmp[$i]=$db_tmp_port_udp[($i-$db_tcp)]['timestamp'];
               $db_banner[$i]=$db_tmp_port_udp[($i-$db_tcp)]['banner'];
            }
         }
         $tcp=0;
         $udp=0;
         for ($i=0;$i<$ports;$i++)
         {
            if ($data['port'][$i]['protocol']=="tcp")
            {
               $tmp_port_tcp[$tcp]['port']=$data['port'][$i]['portid'];
               $tmp_port_tcp[$tcp]['banner']=$data['port'][$i]['description'];
               $tcp++;
            }
            else if ($data['port'][$i]['protocol']=="udp")
            {
               $tmp_port_udp[$udp]['port']=$data['port'][$i]['portid'];
               $tmp_port_udp[$udp]['banner']=$data['port'][$i]['description']
;
               $udp++;
            }
         }
         if ((isset($tmp_port_tcp))&&(is_array($tmp_port_tcp)))
            sort($tmp_port_tcp);
         if ((isset($tmp_port_udp))&&(is_array($tmp_port_udp)))
            sort($tmp_port_udp);
         if (($tcp==0)&&($udp==0)) //In case our scan didnt detect any open ports
         {
            $protocol[$i]="tcp";
            $port[$i]=0;
            $banner[$i]=":";

         }
         else
         {
            for ($i=0;$i<$tcp;$i++)
            {
               $protocol[$i]="tcp";
               $port[$i]=$tmp_port_tcp[$i]['port'];
               $banner[$i]=$tmp_port_tcp[$i]['banner'];
            }
            for ($i;$i<($tcp+$udp);$i++)
            {
               $protocol[$i]="udp";
               $port[$i]=$tmp_port_udp[($i-$tcp)]['port'];
               $banner[$i]=$tmp_port_udp[($i-$tcp)]['banner'];
            }
         }
         $add_counter=0;	//Let's count the number of new open ports 
         $remove_counter=0;	//Let's count the number of old closed ports
	 $update_counter=0;	//Number of ports which version service has changed
         $result="";
         if (is_array($port)&&is_array($db_port))
         {
  	    $result=array_diff($port,$db_port);	//New open ports discovered that are to be added to the database
            $position=array_keys($result);	//Their position in the array
            $index=count($result);		//Number of open ports this time
            for ($i=0;$i<$index;$i++)
            {
               if ($port[$position[$i]]!=0)
               {
                  $add_port[$add_counter]=$result[$position[$i]];
                  $add_prot[$add_counter]=$protocol[$position[$i]];
                  $add_banner[$add_counter]=$banner[$position[$i]];
                  $queries['message'][$queries['messages']]="New port open (".$add_port[$add_counter]."/".$add_prot[$add_counter].") on host $ip.\n";
	       //debug1($queries['message'][$queries['messages']]);
                  $queries['messages']++;
                  $queries=check_service($ip,$add_port[$add_counter],$add_prot[$add_counter],$add_banner[$add_counter],$queries);
                  $add_counter++;
               }
            }
         
            $result="";
            $result=array_diff($db_port,$port);	//Old open ports which are not open in this new scan, therefore should be discarded from the database
            $position=array_keys($result);
            $index=count($result);
            for ($i=0;$i<$index;$i++)
            {
               if ($db_port[$position[$i]]!=0)
               {
                  $remove_port[$remove_counter]=$result[$position[$i]];
                  $remove_prot[$remove_counter]=$db_protocol[$position[$i]];
                  $queries['message'][$queries['messages']]="Port (".$remove_port[$remove_counter]."/".$remove_prot[$remove_counter].") on host $ip no longer open since ".$db_porttstmp[$position[$i]]."\n";
	          //debug1($queries['message'][$queries['messages']]);
                  $queries['messages']++;
                  $remove_counter++;
               }
            }
	    $xml_result=array_intersect($port,$db_port);  //Now we check the protocol to find out if it is the same service, if not, we add the service to the database
	    $db_result=array_intersect($db_port,$port);
            if (isset($xml_result)&&isset($db_result))
            {
	       $xml_position=array_keys($xml_result);
	       $db_position=array_keys($db_result);
	       $index=count($xml_position);
	       $j=0;
	       $result="";
	       for ($i=0;$i<$index;$i++)
   	          if (strcasecmp($protocol[$xml_position[$i]],$db_protocol[$db_position[$i]] )!=0)
   	          {
                     $result[$j]=$xml_result[$xml_position[$i]]; //This is a new service since we have another port number but with different protocol
	  	     $prot_res[$j]=$protocol[$xml_position[$i]];
                     $string[$j]=$banner[$xml_position[$i]];
	  	     $j++;
   	          }  
                  else
                  {
                     $queries=check_service($ip,$xml_result[$xml_position[$i]],$protocol[$i],$banner[$xml_position[$i]],$queries); //Let's check if the service is running on its default port
                     if (strcasecmp($banner[$xml_position[$i]],$db_banner[$db_position[$i]])!=0) //Now let's check if the service has changed
                     {
                        $service=explode(":",$db_banner[$db_position[$i]]);
			$service=$service[0];
			$update_port[$update_counter]=$port[$xml_position[$i]];
			$update_prot[$update_counter]=$protocol[$i];
			$update_banner[$update_counter]=$banner[$xml_position[$i]];
 			$queries['message'][$queries['messages']]="Service $service(".$port[$xml_position[$i]]."/".$protocol[$i].") on host $ip has changed since ".$db_porttstmp[$db_position[$i]].". Was using ".$db_banner[$db_position[$i]]." but now is using ".$banner[$xml_position[$i]]."\n";
			//debug1($queries['message'][$queries['messages']]);
		        $queries['messages']++;
			$update_counter++;
		     }
                  }
               if (is_array($result))	//We have collected ports to add, let's pass them to our add_port structure and print some messages to inform
               {
                  $keys_result=array_keys($result);
                  $differences=count($keys_result);
                  for ($i=0;$i<$differences;$i++)
                  {
                     $add_port[$add_counter]=$result[$keys_result[$i]];
                     $add_prot[$add_counter]=$prot_res[$keys_result[$i]];
                     $add_banner[$add_counter]=$string[$keys_result[$i]];
                     $queries['message'][$queries['messages']]="New port open (".$add_port[$add_counter]."/".$add_prot[$add_counter].") on host $ip.\n";
		     //debug1($queries['message'][$queries['messages']]);
                     $queries['messages']++;
                     $queries=check_service($ip,$add_port[$add_counter],$add_prot[$add_counter],$add_banner[$add_counter],$queries);
                     $add_counter++;
                  }
               }
            }
            $db_result=array_intersect($db_port,$port);  //This is the same than list time, but now we are checking the services from the database that we are going to delete
            $xml_result=array_intersect($port,$db_port);
            if (isset($db_result)&&isset($xml_result))
            {
            
               $xml_position=array_keys($xml_result);
               $db_position=array_keys($db_result);
               $index=count($db_position);
               $j=0;
               $result="";
               for ($i=0;$i<$index;$i++)
                  if (strcasecmp($protocol[$xml_position[$i]],$db_protocol[$db_position[$i]] )!=0)
                  {
                     $result[$j]=$db_result[$db_position[$i]]; //If protocol is different this time, delete it
                     $prot_res[$j]=$db_protocol[$db_position[$i]];
                     $tstmp[$j]=$db_porttstmp[$db_position[$i]];
                     $j++;
                  }
               if (is_array($result))
               {
                  $keys_result=array_keys($result);
                  $differences=count($keys_result);
                  for ($i=0;$i<$differences;$i++)	//Let's update our remove_port structure
                  {
                     $remove_port[$remove_counter]=$result[$keys_result[$i]];
                     $remove_prot[$remove_counter]=$prot_res[$keys_result[$i]];
                     $queries['message'][$queries['messages']]="Port (".$remove_port[$remove_counter]."/".$remove_prot[$remove_counter].") on host $ip no longer open since ".$tstmp[$keys_result[$i]]."\n";
		     //debug1($queries['message'][$queries['messages']]);
                     $queries['messages']++;
                     $remove_counter++;
                  }
               }
             }
         }
         for ($i=0;$i<$remove_counter;$i++)	//Ok, let's perform the queries to delete our old closed ports
         {
            $query=sprintf("delete from nac_openports where host='%s' and port='%s' and protocol='%s';",$id,$remove_port[$i],$remove_prot[$i]);
            $queries['query'][$queries['number']]=$query;
            $queries['number']++;
         }
         for ($i=0;$i<$add_counter;$i++)	//And the queries for the new open ports
         {
            $query=sprintf("insert into nac_openports values ('%s','%s','%s','%s','%s');",$add_port[$i],$add_prot[$i],$id,$add_banner[$i],$timestamp);
            $queries['query'][$queries['number']]=$query;
            $queries['number']++;
         }
	 for ($i=0;$i<$update_counter;$i++)
	 {
            $query=sprintf("update nac_openports set banner='%s',timestamp='%s' where host='%d' and port='%s' and protocol='%s';",$update_banner[$i],$timestamp,$id,$update_port[$i],$update_prot[$i]);
	    $queries['query'][$queries['number']]=$query;
            $queries['number']++;
	 }
      }
   }
   return($queries);   
}

function check_service($ip,$port,$protocol,$banner,$queries)  //With this function we check if a service is running on the port that it has been assigned to by IANA
{
   $query="select service from nac_services".$protocol." where port=".$port.";";
   $res=execute_query($query);
   if ($res)
   {
      $result=mysql_fetch_array($res,MYSQL_ASSOC);
      $service=explode(":",$banner); 
      $service=$service[0];	//We are interested only in the name of the service
      if (!empty($service)&&(!substr_count(strtolower($service),strtolower($result["service"]))))
         if (!empty($result["service"])&&(!substr_count(strtolower($result["service"]),strtolower($service))))
         {
            $queries['message'][$queries['messages']]="Service $service (".$port."/".$protocol.") on scanned host $ip is using a port which is reserved for ".$result["service"]."\n";   
            $queries['messages']++;
         }
   }
   return($queries);
}

function execute_query($query)	
{
   db_connect();
   $res=mysql_query($query);
   if (!$res)
   { echo "Cannot execute query $query because ".mysql_error()."\n"; }
   return $res;
}

function add_entry($data,$queries)	//A new host in our network that needs to be added to the database
{
   if ((!isset($data))||(!is_array($data)))
      check_and_abort("There was a problem parsing the XML file. Make sure you have the right version of PHP and libXML in your system",0);
   $timestamp=date('Y-m-d H:i:s');
   $query=sprintf("insert into nac_hostscanned (mac,ip,hostname,os,timestamp) values('%s','%s','%s','%s','%s');",strtolower($data['mac']),$data['ip'],strtolower($data['hostname']),$data['os'],$timestamp);
   $res=execute_query($query);
   if ($res)
   {
      $queries['message'][$queries['messages']]="Host ".$data['ip']."(".$data['hostname'].") added to the database\n";
      $queries['messages']++;
      $query=sprintf("select id from nac_hostscanned where mac='%s' and ip='%s' and hostname='%s' and os='%s' and timestamp='%s';",$data['mac'],$data['ip'],$data['hostname'],$data['os'],$timestamp);
      $res=execute_query($query);
      if ($res)
      {
         $result=mysql_fetch_array($res, MYSQL_NUM);
         $id=$result[0];
         for ($i=0;$i<$data['ports'];$i++)   //And the open ports of this new host
         {
            $protocol=$data['port'][$i]['protocol'];
            $port=$data['port'][$i]['portid'];
            $banner=$data['port'][$i]['description'];
            $queries=check_service($data['ip'],$port,$protocol,$banner,$queries);
            $query=sprintf("insert into nac_openports values ('%s','%s','%s','%s','%s');",$port,$protocol,$id,$banner,$timestamp);
            execute_query($query); 
         }
      } 
   }
   return($queries);
}

function scan($xml_file,$nmap_flags)	//We perform the scan with the flags specified in the file "port_scan.inc" and the location for our XML file
{
   $scan="nmap ".$nmap_flags." -oX ".$xml_file." ";
   $list=get_ips();		//We need some IPs to scan
   for ($i=0;$i<$list['counter'];$i++) //Put those ips in a string
   {
      logit("Scanning host ".$list['ip'][$i]);
      $hosts.=" ".$list['ip'][$i];
   }
   $scan.=$hosts;		//Now our command line is complete
   syscall($scan);		//Scan
   return($list);
}

function check_and_abort($message,$resource)	//This function checks if there is a problem with some important query and aborts. It is also used to abort the script because we want to do it
{
   if (!is_resource($resource))		//Let's abort just for fun
   {
      debug1($message);
      logit($message);
      debug1("port_scan ended abnormally.\n");
      logit("port_scan ended abnormally");
      exit();
   }
   else
   if (mysql_num_rows($resource) == 0)	//No results from our query so there is no point in continuing execution
   {
      debug1($message);
      logit($message);
      debug1("port_scan ended abnormally.\n");
      logit("port_scan ended abnormally");
      exit();
   }
}

function get_ips()	//This function will get some ips to scan
{
   global $what_units_time, $time_threshold, $argc, $argv;
   $timestamp=date('Y-m-d H:i:s');
   $ips="";
   $list=array();
   $counter=0;
   if (($argc==2)&&($argv[1]=="--scannow"))
   {
      $query="select r_ip,mac,name from systems where scannow=1;";
      $res=execute_query($query);
      while ($result=mysql_fetch_array($res,MYSQL_ASSOC))
      {
         $devices['ip'][$counter]=$result["r_ip"];
         $devices['mac'][$counter]=$result["mac"];
         $devices['hostname'][$counter]=$result["name"];
         $counter++;
      }
   }
   else if ($argc>=2)
   {
      for ($i=1;$i<$argc;$i++)
      {
         $device=validate($argv[$i]);
         if ($i==1)
            $query="select r_ip,mac,name from systems where r_ip='$device'";
         else
            $query.=" or r_ip='$device'";
      }
      $query.=";";
      $res=execute_query($query);
      while ($result=mysql_fetch_array($res,MYSQL_ASSOC))
      {
         $devices['ip'][$counter]=$result["r_ip"];
         $devices['mac'][$counter]=$result["mac"];
         $devices['hostname'][$counter]=$result["name"];
         $counter++;
      }
      for ($i=1;$i<$argc;$i++)
      {
         $there=0;
         for ($j=0;$j<$counter;$j++)
            if ($argv[$i]==$devices['ip'][$j])
               $there++;   
         if (!$there)
         {
            $devices['ip'][$counter]=$argv[$i];
            $devices['mac'][$counter]="NULL";
            $devices['hostname'][$counter]="NULL";
            $counter++;
         }
      }
   }   
   else if ($argc==1)
   {
      $query="select lastseen,r_ip,mac,name from systems where r_ip!='NULL' and status=1;";
      $res=execute_query($query);
      check_and_abort("No ip addresses to scan found in systems table. Aborting...",$res);
      while ($result=mysql_fetch_array($res,MYSQL_ASSOC))
      {
         $devices['ip'][$counter]=$result["r_ip"];
         $devices['mac'][$counter]=$result["mac"];
         $devices['hostname'][$counter]=$result["name"];
         $devices['lastseen'][$counter]=$result["lastseen"];
         $counter++;
      }
   }   
   $devices['counter']=$counter;
   //We got some ips, let's see which ones are candidates to be scanned according to the info provided in the nac_netsallowed table
   $query="select network from nac_netsallowed;"; 
   $res1=execute_query($query);
   if ($res1)
   {
      $counter=0;
      $number=0;
      check_and_abort("Nothing to scan. No networks defined in nac_netsallowed. Aborting...",$res1);
      while ($result1=mysql_fetch_array($res1,MYSQL_ASSOC))
      {
         $network[$number]=$result1["network"];
         $number++;
      }
      for ($l=0;$l<$devices['counter'];$l++)
      {
         $candidate=0;
         $ip=explode('.',$devices['ip'][$l]);
         for ($i=0;$i<$number;$i++)
         {
            $net=explode('.',$network[$i]);
            $octets=count($net);  //Let's count the # of octects of the register in the table
            $candidate=4-$octets;
            for ($k=0;$k<$octets;$k++)
            {
               if ($quotes=substr_count($net[$k],',')) //Check for separate ips within this octet
               {
                  $delimiters=explode(',',$net[$k]);
                  for ($j=0;$j<=$quotes;$j++)
	             if (substr_count($delimiters[$j],'-')==1)  //Now check if there is a range in this octet
                     {
                        $range=explode('-',$delimiters[$j]);
                        $lowerbound=$range[0];
                        $upperbound=$range[1];
                        if (($ip[$k]>=$lowerbound)&&($ip[$k]<=$upperbound))
                           $candidate++;
                     }
                     else 
                        if ($ip[$k]==$delimiters[$j]) //Exact match in this octet
		           $candidate++;
               }    
               else if (substr_count($net[$k],'-')==1) //A range of ips
               {
                  $range=explode('-',$net[$k]);
                  $lowerbound=$range[0];
	          $upperbound=$range[1];
                  if (($ip[$k]>=$lowerbound)&&($ip[$k]<=$upperbound))
	             $candidate++;   
               }
               else if (substr_count($net[$k],'*')==1) //All ips in this octet
                  $candidate++;
               else
                  if ($ip[$k]==$net[$k]) //Exact match
                     $candidate++;
            }
            $there=0; 
	    if (($candidate==4)&&($argc==1)) //This is an ip which is a good candidate to be scanned and no parameters present on the command line
            {
               $lastseen=$devices['lastseen'][$l];
               $diff=(int)date_diff($lastseen,$timestamp,$what_units_time);
               if ($diff<=$time_threshold)
               {
	          for ($k=0;$k<=$counter;$k++)
                     if ($devices['ip'][$l]==$list[$k])
                        $there++;
                  if (!$there)
                  {
                     $list['ip'][$counter]=$devices['ip'][$l];
		     $list['mac'][$counter]=$devices['mac'][$l];
		     $list['hostname'][$counter]=$devices['hostname'][$l];
                     $counter++;
                  }
               }
            }
            else if (($candidate==4)&&($argc>1))
            {
               for ($k=0;$k<=$counter;$k++)
                  if ($devices['ip'][$l]==$list[$k])
                     $there++;
               if (!$there)
               {
                  $list['ip'][$counter]=$devices['ip'][$l];
                  $list['mac'][$counter]=$devices['mac'][$l];
                  $list['hostname'][$counter]=$devices['hostname'][$l];
                  $counter++;
               }
            }
         }
      }
      $list['counter']=$counter;
      if (($counter==0)&&($argc==1))
         check_and_abort("IPs didn't match criteria (check nac_netsallowed or your port_scan.inc file). Quitting...\n",0);
      else if (($counter==0)&&($argc>1)&&($argv[1]=="--scannow"))
         check_and_abort("No systems have the flag \"scannow\" set in the systems table. Quitting...\n",0);
   }   
   return($list);  
}

function date_diff($date1, $date2,$what) //Time difference between the timestamp from the database and the one generated by the script
{
   $temp=explode(" ",$date1);
   $time_info_1=explode(":",$temp[1]);
   $date_info_1=explode("-",$temp[0]);
   $temp=explode(" ",$date2);
   $time_info_2=explode(":",$temp[1]);
   $date_info_2=explode("-",$temp[0]);
   $time1=mktime((int)$time_info_1[0],(int)$time_info_1[1],(int)$time_info_1[2],(int)$date_info_1[1],(int)$date_info_1[2],(int)$date_info_1[0]);
   $time2=mktime((int)$time_info_2[0],(int)$time_info_2[1],(int)$time_info_2[2],(int)$date_info_2[1],(int)$date_info_2[2],(int)$date_info_2[0]);
   $time=$time2-$time1;
   if (($what<0)||($what>6))
      $what=2;
   for ($i=1;$i<=$what;$i++)
   {
      if (($i==1)||($i==2))	//Minutes and hours
         $time/=60;
      else if ($i==3)		//Days
         $time/=24;
      else if ($i==4)		//Weeks
         $time/=7;
      else if ($i==5)		//Months
	 $time/=4;
      else if ($i==6)		//Years
         $time/=12;
   }
   return $time; //This time is not very accurate, it is just an approximation
}

function parse_scanfile($scan_file,$list)
{
   $info=array();
   if (file_exists($scan_file))
   {
      $file_loaded=file_get_contents(trim($scan_file));
      if (!$file_loaded)
         check_and_abort("Couldn't load contents of file $scan_file",0);
      if(preg_match("/<?xml version/i",$file_loaded))
      {
         $i=0;
         $xml = simplexml_load_string($file_loaded); #Picking info from XML file
         foreach($xml->host as $host) 
         {
            $ip_info=$host->address[0];
	    $temp=$ip_info->attributes(); //Let's retrieve the attributes
            if (isset($temp->addr))
               $info[$i]['ip']=(string)$temp->addr;         //IP address
            else $info[$i]['ip']="NULL";
	    $info[$i]['ip']=validate($info[$i]['ip']);
            $index=0;	
	    while (($info[$i]['ip']!=$list['ip'][$index])&&($index<$list['counter']))
		$index++;
            if (isset($host->address[1]))	//MAC address of scanned host
            {
               $mac_info=$host->address[1];
               $temp=$mac_info->attributes();
               if (isset($temp->addr))
               {
                  $info[$i]['mac']=(string)$temp->addr; 
                  $info[$i]['mac']=normalise_mac($info[$i]['mac']);
               }
               else $info[$i]['mac']=$list['mac'][$index];
	       $info[$i]['mac']=validate($info[$i]['mac']);	 
            }
            else $info[$i]['mac']=$list['mac'][$index];
            if (isset($host->hostnames->hostname))	
            {
               $host_info=$host->hostnames->hostname; 
               $temp=$host_info->attributes();
            }
            if (isset($temp->name))
               $info[$i]['hostname']=(string)$temp->name; 	//Hostname
            else $info[$i]['hostname']=$list['hostname'][$index];
	    $info[$i]['hostname']=validate($info[$i]['hostname']); 
            if (isset($host->os->osmatch))
            {
               $os_info=$host->os->osmatch;
               $temp=$os_info->attributes();
               if (isset($temp->name))
                  $info[$i]['os']=(string)$temp->name;			//OS
               else
                  $info[$i]['os']="NULL";
            }
            else $info[$i]['os']="NULL";
	    $info[$i]['os']=validate($info[$i]['os']);
            if (isset($host->ports))
            {
               $ports_info=$host->ports;
               $j=0;
               foreach($ports_info->port as $port)		//Ports
               {
	          $temp=$port->state->attributes();
                  if (strcasecmp((string)$temp->state,"open")==0)
                  {
                     $temp=$port->attributes();
                     $info[$i]['port'][$j]['protocol']=(string)$temp->protocol;	#Protocol
		     $info[$i]['port'][$j]['protocol']=validate($info[$i]['port'][$j]['protocol']);
                     $info[$i]['port'][$j]['portid']=(string)$temp->portid;	#Service identifier
                     $info[$i]['port'][$j]['portid']=validate($info[$i]['port'][$j]['portid']);
		     $temp=$port->state->attributes();
                     $temp2=$port->service->attributes(); //Attributes to get the running service
                     if (isset($temp2->name))		#Description
                        $name=(string)$temp2->name;
                     else $name="";
                     if (isset($temp2->product))
                        $product=(string)$temp2->product;
                     else $product="";
                     if (isset($temp2->version))
                        $version=(string)$temp2->version;
                     else $version="";
                     $info[$i]['port'][$j]['description']=$name.":".$product." ".$version;
		     $info[$i]['port'][$j]['description']=validate($info[$i]['port'][$j]['description']);	
                     $j++;
                  }
               }
               $info[$i]['ports']=$j;
            }
            $i++;
         }
      }
      else check_and_abort("File $scan_file is not in XML format\n",0);
   }
   else check_and_abort("File $scan_file not found\n",0);
   $info['equipments']=$i;
   return($info);
}
?>
