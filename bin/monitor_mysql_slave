#!/usr/bin/env bash
#!/usr/bin/sh -x
#
# FILE: monitor_mysql_slave
#
# FUNCTION: Alert once every $repeat_alert_interval mins, if replication dies.
#     By default below, we suggest being called from cron every five minutes
#     during working hours, but only being sent a reminder alerts once per 
#     hour (to reduce email floods).
#     Adust $repeat_alert_interval and the cron interval to your needs.
#
# USAGE:    Call from cron e.g. every 5 minutes, if an emails come, react!
#     */5  7-18 * * 1-5 /opt/vmps/monitor_mysql_slave
#  
# Based on original from:
#   Matthew Montgomery mmontgom@rackspace.com 
#   http://forge.mysql.com/snippets/view.php?id=6
#
# @package                     FreeNAC
# @author                      FreeNAC Core Team
# @copyright                   2007 FreeNAC
# @license                     http://www.gnu.org/copyleft/gpl.html   GNU Public License Version 2
# @version                     SVN: $Id$
# @link                        http://www.freenac.net
#
########################

subject="MySQL replication problem"
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/mysql/bin
tempfile2=/tmp/monitor_replication.$$



repeat_alert_interval=60 # minutes
lock_file=/tmp/slave_alert.lck
active=yes

## Check if alert is already sent ##

function check_alert_lock () {
    if [ -f $lock_file ] ; then
        current_file=`find $lock_file -cmin -$repeat_alert_interval`
        if [ -n "$current_file" ] ; then
            # echo "Current lock file found"
            return 1
        else
            # echo "Expired lock file found"
            return 2
        fi
    else
    return 0
    fi
}

## Find the location of the mysql.sock file ##

function check_for_socket () {
        if [ -z $socket ] ; then
                if [ -S /var/lib/mysql/mysql.sock ] ; then
                        socket=/var/lib/mysql/mysql.sock
                elif [ -S /tmp/mysql.sock ] ; then
                        socket=/tmp/mysql.sock
                else
                        ps_socket=`netstat -ln | egrep "mysql(d)?\.sock" | awk '{ print $9 }'`
                        if [ "$ps_socket" ] ; then
                        socket=$ps_socket
                        fi
                fi
        fi
        if [ -S "$socket" ] ; then
                echo UP > /dev/null
        else
                echo "No valid socket file "$socket" found!"
                echo "mysqld is not running or it is installed in a custom location"
                echo "Please set the $socket variable at the top of this script."
                exit 1
        fi
}

check_for_socket

# Note SB: added '-i' to grep
Slave_IO_Running=`mysql -Bse "show slave status\G"  | grep -i Slave_IO_Running  | awk '{ print $2 }'`
Slave_SQL_Running=`mysql -Bse "show slave status\G" | grep -i Slave_SQL_Running | awk '{ print $2 }'`
Last_error=`mysql -Bse "show slave status\G"        | grep -i Last_error        | awk -F \: '{ print $2 }'`


if [ -z $Slave_IO_Running -o -z $Slave_SQL_Running ] ; then
        echo "Replication is not configured or you do not have the required access to MySQL"
        exit
fi

if [ $Slave_IO_Running == 'Yes' ] && [ $Slave_SQL_Running == 'Yes' ] ; then
    if [ -f $lock_file ] ; then
        rm $lock_file
        echo "Replication slave is running"
        echo "Removed Alert Lock"
    fi
    exit 0
elif [ $Slave_SQL_Running == 'No' ] ; then
    if [ $active == 'yes' ] ; then
        check_alert_lock
        if [ $? = 1 ] ; then
            ## Current Lock ##
            echo "up" > /dev/null
        else
            ## Stale/No Lock ##
             touch $lock_file
            echo "SQL thread not running on server `hostname -s`!"
            echo "Last Error:" $Last_error
        fi
    fi
    exit 1
elif [ $Slave_IO_Running == 'No' ] ; then
        if [ $active == 'yes' ] ; then
                check_alert_lock
                if [ $? = 1 ] ; then
                        ## Current Lock ##
            echo "up" > /dev/null
                else
                        ## Stale/No Lock ##
                        touch $lock_file
                        echo "LOG IO thread not running on server `hostname -s`!"
                        echo "Last Error:" $Last_error
                fi
    fi
    exit 1
else
        if [ $active == 'yes' ] ; then
                check_alert_lock
                if [ $? = 1 ] ; then
                        ## Current Lock ##
            echo "up" > /dev/null
                else
                        ## Stale/No Lock ##
                        touch $lock_file
            echo "Unexpected Error!"
            echo "Check Your permissions!"
                fi
        fi
    exit 2
fi



