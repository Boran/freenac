#!/usr/bin/php -f
<?php
/**
 * /opt/nac/bin/ldap
 *
 * Long description for file:
 * Query Microsoft Active Directory to obtain user information.
 *
 *
 * PHP version 5
 *
 * LICENSE: This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation.
 *
 * @package			FreeNAC
 * @author			Wolfram Strauss (FreeNAC Core Team)
 * @copyright		2006 FreeNAC
 * @license			http://www.gnu.org/copyleft/gpl.html   GNU Public License Version 2
 * @version			CVS: $Id:$
 * @link			http://www.freenac.net
 *
*/


# main

# initialize
include_once "funcs.inc";  

# configure logging
$logit_to_stdout = TRUE;
$debug_flag1 = FALSE;
$debug_to_syslog = FALSE;

debug1("variables from configfile: $ad_server, $ad_user, $ad_password, $ad_base_user_dn");


# main
# if test is given on the command line, connect to ldap and dump received data only
if( $argc > 1 and $argv[1] = 'test') {
	$debug_flag1 = TRUE;
	query_AD();
	
}
elseif( $argc > 1 and $argv[1] != 'test' ) {
	print("Wrong cmd parameter. Usage:\nldap [test]\n");
}
else {
	$users = query_AD();
	if( $users ) { fill_db($users); }	# if $users is empty this indicates that there's been an error connecting to the AD
	else logit('No data processed for DB due to LDAP errors!');
}

# Query AD and return assoc. array
function query_AD() {
	global $ad_server, $ad_user, $ad_password, $ad_base_user_dn;
	
	logit('Querying user information from AD');
	
	$connect = ldap_connect($ad_server) or logit('Could not connect to Active Directory, ' . ldap_error($connect));
	$bind = ldap_bind($connect, $ad_user, $ad_password) or logit('Could not bind to Active Directory, ' . ldap_error($connect));

	$filter = "objectClass=person";	# There might be objects of other classes around (e.g. groups) we don't want to fetch

	# AD attribute names 
	# username: sAMAccountName
	# prename: givenName
	# family name: sn
	$fetch_attributes = array('sAMAccountName','givenName','sn');

	$results = ldap_list($connect, $ad_base_user_dn, $filter, $fetch_attributes) or logit('Could not retrieve data, ' . ldap_error($connect));
	$info = ldap_get_entries($connect, $results) or logit('Could not get entries, ' . ldap_error($connect));

	ldap_close($connect);   

	debug1(print_r($info, TRUE));
	
	return $info;
}


# Insert new or update existing user information
function fill_db($users) {
	logit('Updating user table');
	
	db_connect();
	
	foreach( $users as $i ) {
		$account = $i['samaccountname'][0];
		$given_name = $i['givenname'][0];
		$surname = $i['givenname'][0];
		debug1("User attributes: $account|$given_name|$surname");
		
		if( $account ) {	# make sure each entry processed has an account name
			$check_query = "SELECT AssocNTAccount from users where AssocNTAccount = '$account'";
			debug1($check_query);
			$entry_exists = mysql_query($check_query) or logit('Check query failed, ' . $mysql_error());
			
			if( mysql_num_rows($entry_exists) > 0 ) {
				logit("$account exists already, will update it");
				$update_query = "UPDATE users SET Surname = '$surname', GivenName = '$given_name', LastSeenDirex = NOW() WHERE AssocNTAccount = '$account'";
				debug1($update_query);
				mysql_query($update_query) or logit('Update query failed, ' . $mysql_error());
			}
			else {
				logit("$account dosen't exist yet, will insert it");
				$insert_query = "INSERT INTO users (AssocNTAccount, Surname, GivenName, LastSeenDirex) VALUES('$account', '$surname', '$given_name', NOW())";
				debug1($insert_query);
				mysql_query($insert_query) or logit('Insert query failed, ' . $mysql_error());
			}
		}
		
	}
} 
?>
