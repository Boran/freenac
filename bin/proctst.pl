#!/usr/bin/perl -w
#
# proctst.pl
#
# FUNCTION: A daemon to check that key process are running, if not
#           restart them. See config file /etc/proctst
# CONFIGURATION: see /etc/proctst.conf
#
# INSTALLATION: 
# Usually installed as a daemon on startup:
# On Sun:
#   ln -s /opt/nac/bin/proctst.pl /etc/init.d/proctst
#   ln -s /opt/nac/bin/proctst.pl /etc/rc2.d/S98proctst
#   ln -s /opt/nac/bin/proctst.pl /etc/rc2.d/K98proctst
# On Linux:
#   ln -s /opt/nac/bin/proctst    /etc/init.d/proctst
#   chkconfig proctst on
#   /etc/init.d/proctst start
#
# 2001      Roy Culley
# 27.Dec'01 Sean <1>: Use sendmail pipe rather than cpan module. 
#           Comments. Add $debug and lots of debug prints. 
# 30.Jan'06 Sean: finally started to use it :-). Add comments.
#
########

my $debug = "0";
my $EMail = "root";

use strict;
my $MailDelay = 3*60*60; # delay between sending emails (3 hours)
my $LoopDelay = 60;      # Determines how frequently cron pid is checked

my $UNAME = "/bin/uname";
my ($HostName, $OSType);
chomp($HostName = `$UNAME -n`);
chomp($OSType   = `$UNAME -s`);

die "$OSType not supported yet\n" unless $OSType =~ /^(Linux|SunOS)$/;

my %CmdList   = ();
my %LastMail  = ();
my @Tmp;

my $ConfFile = "/etc/proctst.conf";

open(IN, $ConfFile) or die "$ConfFile: $!\n";
while (<IN>) {
    next if /^\s*#/; # skip comments
    next if /^\s*$/;
    #print "Configuration line: $_" if $debug;
    chomp;
    if (/^(.+)::(.+)/) {
        $CmdList{$1}  = $2;
        $LastMail{$1} = 0;
        @Tmp = split(/ /, $CmdList{$1});
        #die "BAD: $_\n" unless -f $Tmp[0];
        die "$0: $Tmp[0] does not exist.\n" unless -f $Tmp[0];
    }
}
close(IN);

my ($Cmd, $PIDCmd, $StartCmd, $CurrPID, $Msg1, $Msg2, $Subj);

if ($debug) {
   print "Configuration found:\n";
   foreach $Cmd (keys %CmdList) {
     print "Command=$Cmd  Restart=$CmdList{$Cmd}\n" if $debug;
   }
}

while (1) {
    print "Checking processes..\n" if $debug;
    foreach $Cmd (keys %CmdList) {
        $Msg1 = " - $Cmd restarted successfully\n";
        $Msg2 = " - $Cmd failed to restart, won't try again\n";
        $Subj = "$Cmd died on $HostName\n";
        $StartCmd = $CmdList{$Cmd};

        print "Looking for $Cmd .." if $debug;
        if ($OSType eq "Linux") {
            $PIDCmd = "/bin/ps -C $Cmd -o pid=";
        }
        elsif ($OSType eq "SunOS") {
            #$PIDCmd = "/bin/pgrep -x -u 0 -P 1 $Cmd";
            # check port, logic invertd for rest of script.
            $PIDCmd = "netstat -a | egrep 'Idle|LISTEN' | grep -c $Cmd";
        }

        chomp($CurrPID = `$PIDCmd`);
        print " CurrPID=$CurrPID" if $debug;
    
        if (! $CurrPID) { # command has died
        #if ($CurrPID) { # port is closed
            print ", died - so restart $StartCmd" if $debug;
            `$StartCmd >/dev/null 2>&1`;
            sleep 2;
            chomp($CurrPID = `$PIDCmd`);
            if (! $CurrPID) { # command has failed to restart
                print ". Restart failed.\n" if $debug;
                MailIt($Cmd, $EMail, $Subj, $Msg2);
            }
            else {
                print ".\n" if $debug;
                MailIt($Cmd, $EMail, $Subj, $Msg1);
            }
        }
	else {
            print " OK\n" if $debug;
	}
    }
    print "Waiting $LoopDelay secs..\n" if $debug;
    sleep $LoopDelay;       # wait one minute
}

sub MailIt {
    my ($Cmd, $To, $Subject, $Msg) = @_;
    my ($CurrTime);

    $CurrTime = time();
    print "Email alert. " if $debug;

    if ($CurrTime < ($LastMail{$Cmd} + $MailDelay)) {
      print "Too soon since last email alert. Ignore this time.\n" if $debug;
      return;
    }

    $Msg = $Msg . "This Email was generated by $HostName:$0";

    print "Call sendmail. " if $debug;
    ## Send email via pipe to sendmail to avoid installing
    ## the CPAN module
    open (EMAIL, "| /usr/lib/sendmail -t -oi")
     || die "$0: Can't call sendmail, $!";
    # catch SIGPIPE in this block
    local $SIG{PIPE} = sub {die "$0:sendmail pipe broken."};
    print EMAIL "From: root\@$HostName\n";
    print EMAIL "To: $To\n";
    print EMAIL "Subject: $Subject\n\n\n";
    print EMAIL $Msg;
    close EMAIL || die "$0: Can't close Email pipe: $!";
    print "done.\n" if $debug;

    #sendmail(To      => $To,
    #         From    => "root\@$HostName",
    #         Subject => $Subject,
    #         Message => $Msg,
    #         smtp    => $SMTPServer)
    #    or die "Cannot send mail: $Mail::Sendmail::error\n";

    $LastMail{$Cmd} = $CurrTime;

}
